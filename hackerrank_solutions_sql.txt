
PrepareSQLBasic SelectRevising 

select query I
--------------------------------------------------------------------------------------------------------------------------------------------
Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.

The CITY table is described as follows:
The CITY table is described as follows:
+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(17) |
| COUNTRYCODE | VARCHAR2(3)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+
*/

---SELECT *FROM CITY WHERE POPULATION>100000 HAVING COUNTRYCODE='USA';

------------------------------------------------------------------------------------------------------------------------------------------------------

the Select Query II
=====================================================

1) /*Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

The CITY table is described as follows:
+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(17) |
| COUNTRYCODE | VARCHAR2(3)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+
*/

----SELECT NAME FROM CITY WHERE COUNTRYCODE='USA' AND POPULATION>120000;

---------------------------------------------------------------------------------------------------
/*Query all columns (attributes) for every row in the CITY table.

The CITY table is described as follows:
+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(17) |
| COUNTRYCODE | VARCHAR2(3)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+
*/

----SELECT *FROM CITY;

-------------------------------------------------------------------------------------------------------------------------

/*Query all columns for a city in CITY with the ID 1661.

The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(17) |
| COUNTRYCODE | VARCHAR2(3)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+
*/

---SELECT *FROM CITY WHERE ID=1661;

----------------------------------------------------------------------------------------------------------------------------
/*Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.

The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(17) |
| COUNTRYCODE | VARCHAR2(3)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+
*/

---SELECT *FROM CITY WHERE COUNTRYCODE='JPN';

---------------------------------------------------------------------------------------------------------------------------------------
/*Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.

The CITY table is described as follows:


+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(17) |
| COUNTRYCODE | VARCHAR2(3)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+
*/

---SELECT NAME FROM CITY WHERE COUNTRYCODE='JPN';


-----------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 1

--------------------------------------------------------------------------------------------------------------------------------------------------
/*Query a list of CITY and STATE from the STATION table.

The STATION table is described as follows:
+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/

---SELECT CITY,STATE FROM STATION ;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

##Weather Observation Station 3

-----------------------------------------------------------------------------------------------------------------------------------------------------------
/*Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.

The STATION table is described as follows:
+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/

----SELECT DISTINCT CITY FROM STATION WHERE MOD(ID,2)=0 ORDER BY CITY ASC;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

##Weather Observation Station 2
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Query the following two values from the STATION table:

The sum of all values in LAT_N rounded to a scale of  decimal places.
The sum of all values in LONG_W rounded to a scale of  decimal places.
Input Format

The STATION table is described as follows:
+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+

where LAT_N is the northern latitude and LONG_W is the western longitude.

Output Format

Your results must be in the form:

lat lon

where  is the sum of all values in LAT_N and  is the sum of all values in LONG_W. Both results must be rounded to a scale of  decimal places.

-----SELECT ROUND(SUM(LAT_N),2), ROUND(SUM(LONG_W),2) FROM STATION;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

##Weather Observation Station 4
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


/* Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
The STATION table is described as follows:
+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+

where LAT_N is the northern latitude and LONG_W is the western longitude.

For example, if there are three records in the table with CITY values 'New York', 'New York', 'Bengalaru', there are 2 different city names: 'New York' and 'Bengalaru'. The query returns , because .


-------SELECT COUNT(CITY) - COUNT(DISTINCT CITY) FROM STATION; 


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 5
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
The STATION table is described as follows:


+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/

where LAT_N is the northern latitude and LONG_W is the western longitude.

Sample Input

For example, CITY has four entries: DEF, ABC, PQRS and WXY.

Sample Output

ABC 3
PQRS 4
Explanation

When ordered alphabetically, the CITY names are listed as ABC, DEF, PQRS, and WXY, with lengths  and . The longest name is PQRS, but there are  options for shortest named city. Choose ABC, because it comes first alphabetically.

Note
You can write two separate queries to get the desired output. It need not be a single query.

------SELECT CITY,LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) ASC,CITY LIMIT 1;

------SELECT CITY,LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) DESC,CITY LIMIT 1;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 6
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.

Input Format

The STATION table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/
where LAT_N is the northern latitude and LONG_W is the western longitude.

-----SELECT DISTINCT CITY FROM STATION WHERE CITY LIKE 'a%' OR CITY LIKE 'e%' OR CITY LIKE 'i%' OR CITY LIKE 'o%' OR CITY LIKE 'u%';


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 7
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
Input Format

The STATION table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/

where LAT_N is the northern latitude and LONG_W is the western longitude

-----SELECT DISTINCT CITY FROM STATION WHERE CITY LIKE'%a' OR CITY LIKE'%e' OR CITY LIKE'%i' OR CITY LIKE'%o' OR CITY LIKE'%u';

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 8

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates.
The STATION table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/

where LAT_N is the northern latitude and LONG_W is the western longitude

-----SELECT DISTINCT CITY FROM STATION WHERE (CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' OR CITY LIKE '%u') AND (CITY LIKE 'a%' OR CITY LIKE 'e%' OR CITY LIKE 'i%' OR CITY LIKE 'o%' OR CITY LIKE 'u%');

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 9

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/*Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/

where LAT_N is the northern latitude and LONG_W is the western longitude


-----SELECT DISTINCT CITY FROM STATION WHERE CITY NOT LIKE 'a%' AND CITY NOT LIKE 'e%' AND CITY NOT LIKE 'i%' AND CITY NOT LIKE 'o%' AND CITY NOT LIKE 'u%';

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 10

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/

where LAT_N is the northern latitude and LONG_W is the western longitude


-----SELECT DISTINCT CITY FROM STATION WHERE CITY NOT LIKE '%a'AND CITY NOT LIKE '%e'AND CITY NOT LIKE '%i'AND CITY NOT LIKE '%o'AND CITY NOT LIKE '%u';

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 11

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/

where LAT_N is the northern latitude and LONG_W is the western longitude.


-----SELECT DISTINCT CITY FROM STATION WHERE (CITY NOT LIKE '%a' AND CITY NOT LIKE '%e' AND CITY NOT LIKE '%i' AND CITY NOT LIKE '%o' AND CITY NOT LIKE '%u') OR (CITY NOT LIKE 'a%' AND CITY NOT LIKE 'e%' AND CITY NOT LIKE 'i%' AND CITY NOT LIKE 'o%' AND CITY NOT LIKE 'u%');

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 12

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/

where LAT_N is the northern latitude and LONG_W is the western longitude.

----SELECT DISTINCT CITY FROM STATION WHERE (CITY NOT LIKE '%a' AND CITY NOT LIKE '%e' AND CITY NOT LIKE '%i' AND CITY NOT LIKE '%o' AND CITY NOT LIKE '%u') AND (CITY NOT LIKE 'a%' AND CITY NOT LIKE 'e%' AND CITY NOT LIKE 'i%' AND CITY NOT LIKE 'o%' AND CITY NOT LIKE 'u%');

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 13

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Query the sum of Northern Latitudes (LAT_N) from STATION having values greater than 38.7880 and less than137.2345 . Truncate your answer to  decimal places.

Input Format

The STATION table is described as follows:
+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/

----SELECT TRUNCATE(SUM(LAT_N),4) FROM STATION WHERE LAT_N  BETWEEN 38.7880 AND 137.2345;


where LAT_N is the northern latitude and LONG_W is the western longitude.



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 14

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Query the greatest value of the Northern Latitudes (LAT_N) from STATION that is less than . Truncate your answer to  decimal places.

Input Format

The STATION table is described as follows:
+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/

where LAT_N is the northern latitude and LONG_W is the western longitude.


----SELECT TRUNCATE(MAX(LAT_N),4) FROM STATION WHERE LAT_N<=137.2345;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 15

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Query the Western Longitude (LONG_W) for the largest Northern Latitude (LAT_N) in STATION that is less than . Round your answer to  decimal places.

Input Format

The STATION table is described as follows:
+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/

where LAT_N is the northern latitude and LONG_W is the western longitude.

----SELECT ROUND((LONG_W),4) FROM STATION WHERE LAT_N=(SELECT MAX(LAT_N) FROM STATION WHERE LAT_N<137.2345);
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 16

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Query the smallest Northern Latitude (LAT_N) from STATION that is greater than38.7780 . Round your answer to  decimal places.

The STATION table is described as follows:
+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/

where LAT_N is the northern latitude and LONG_W is the western longitude.

-----SELECT ROUND(MIN(LAT_N),4) FROM STATION WHERE LAT_N>38.7780;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 17

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Query the Western Longitude (LONG_W)where the smallest Northern Latitude (LAT_N) in STATION is greater than 38.7780. Round your answer to 4  decimal places.

Input Format

The STATION table is described as follows:
+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/
where LAT_N is the northern latitude and LONG_W is the western longitude.

----SELECT ROUND((LONG_W),4) FROM STATION WHERE LAT_N=(SELECT MIN(LAT_N) FROM STATION WHERE LAT_N>38.7780);

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 18

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Consider p1(a,b) and p2(c,d) to be two points on a 2D plane.

-a happens to equal the minimum value in Northern Latitude (LAT_N in STATION).
-b happens to equal the minimum value in Western Longitude (LONG_W in STATION).
-c  happens to equal the maximum value in Northern Latitude (LAT_N in STATION).
-d happens to equal the maximum value in Western Longitude (LONG_W in STATION).
Query the Manhattan Distance between points  and  and round it to a scale of  decimal places.

Input Format

The STATION table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/


where LAT_N is the northern latitude and LONG_W is the western longitude.

---SELECT ROUND(ABS(MAX(LAT_N)-MIN(LAT_N))+ABS(MAX(LONG_W)-MIN(LONG_W)),4) FROM STATION;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Weather Observation Station 19

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Consider p1(a,c)and p2(b,d)to be two points on a 2D plane where (a,b) are the respective minimum and maximum values of Northern Latitude (LAT_N) and (c,d) are the respective minimum and maximum values of Western Longitude (LONG_W) in STATION.

Query the Euclidean Distance between points  and  and format your answer to display 4 decimal digits.

Input Format

The STATION table is described as follows:
+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| CITY        | VARCHAR2(21) |
| STATE       | VARCHAR2(2)  |
| LAT_N       |  NUMBER      |
| LONG_W      | NUMBER       |
+-------------+--------------+
*/

where LAT_N is the northern latitude and LONG_W is the western longitude.

---SELECT ROUND(SQRT(POWER(MAX(LAT_N)-MIN(LAT_N),2)+POWER(MAX(LONG_W)-MIN(LONG_W),2)),4) FROM STATION;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
###Weather Observation Station 20
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

A median is defined as a number separating the higher half of a data set from the lower half. Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to 4 decimal places.

Input Format

The STATION table is described as follows:

----Select round(St.LAT_N,4) mediam from station St where (select count(Lat_N) from station where Lat_N < St.LAT_N ) = (select count(Lat_N) from station where Lat_N > St.LAT_N);

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Higher Than 75 Marks

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

Input Format

The STUDENTS table is described as follows:

+-------------+--------------+
| Column      | Type         |
+-------------+--------------+
| ID          | Integer      |
| Name        | String       |
| Marks       | Integer      |
+-------------+--------------+
The Name column only contains uppercase (A-Z) and lowercase (a-z) letters.

+-------------+--------------+
| Name        | marks        |
+-------------+--------------+
| Ashley      |   81         |
| Samntha     |   75         |
| Julia       |   76         |
| Belvet      |  84          |
+-------------+--------------+

Sample Output

Ashley
Julia
Belvet
Explanation

Only Ashley, Julia, and Belvet have Marks > . If you look at the last three characters of each of their names, there are no duplicates and 'ley' < 'lia' < 'vet'.


------SELECT Name FROM STUDENTS WHERE Marks>75 ORDER BY SUBSTR(NAME, -3),ID;


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

##Employee Salaries

Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months. Sort your result by ascending employee_id.

Input Format

The Employee table containing employee data for a company is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| employee_id | integer      |
| name        | String       |
| months      | integer      |
| salary      |  integer     |
+-------------+--------------+
*/
where employee_id is an employee's ID number, name is their name, months is the total number of months they've been working for the company, and salary is the their monthly salary.

Sample Output

Angela
Michael
Todd
Joe

Explanation

Angela has been an employee for  month and earns  per month.

Michael has been an employee for  months and earns  per month.

Todd has been an employee for  months and earns  per month.

Joe has been an employee for  months and earns  per month.

We order our output by ascending employee_id.


-------SELECT name FROM Employee WHERE salary>2000 AND months<10 ORDER BY employee_id ASC;


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
##Employee Names

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.

Input Format

The Employee table containing employee data for a company is described as follows:
+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| employee_id | integer      |
| name        | String       |
| months      | integer      |
| salary      |  integer     |
+-------------+--------------+
*/

where employee_id is an employee's ID number, name is their name, months is the total number of months they've been working for the company, and salary is their monthly salary.

---SELECT name FROM Employee ORDER BY name ASC;


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Aggregation > Revising Aggregations - The Count Function

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/ * Query a count of the number of cities in CITY having a Population larger than .

Input Format

The CITY table is described as follows:


+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(21) |
| COUNTRYCODE | VARCHAR2(2)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+
*/


------SELECT COUNT(NAME) FROM CITY WHERE POPULATION>100000;


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Aggregation > Revising Aggregations - The sum Function

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Query the total population of all cities in CITY where District is California.

Input Format

The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(21) |
| COUNTRYCODE | VARCHAR2(2)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+
*/

---SELECT SUM(POPULATION) FROM CITY WHERE DISTRICT='California';


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Aggregation > Revising Aggregations - Averages

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Query the average population of all cities in CITY where District is California.

Input Format

The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(21) |
| COUNTRYCODE | VARCHAR2(2)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+
*/


----SELECT AVG(POPULATION) FROM CITY WHERE DISTRICT='California';

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Aggregation > Revising Aggregations - Japan Population

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Query the sum of the populations for all Japanese cities in CITY. The COUNTRYCODE for Japan is JPN.

Input Format

The CITY table is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(21) |
| COUNTRYCODE | VARCHAR2(2)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+
*/


----SELECT SUM(POPULATION) FROM CITY WHERE COUNTRYCODE='JPN';


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Aggregation > Revising Aggregations -Population Density Difference

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Query the difference between the maximum and minimum populations in CITY.

Input Format

The CITY table is described as follows:


+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(21) |
| COUNTRYCODE | VARCHAR2(2)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+
*/


-----SELECT MAX(POPULATION)-MIN(POPULATION) FROM CITY;



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Aggregation > Revising Aggregations-Average Population


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Query the average population for all cities in CITY, rounded down to the nearest integer


Input Format

The CITY table is described as follows:


+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| ID          | NUMBER       |
| NAME        | VARCHAR2(21) |
| COUNTRYCODE | VARCHAR2(2)  |
| DISTRICT    | VARCHAR2(20) |
| POPULATION  | NUMBER       |
+-------------+--------------+
*/

----SELECT ROUND(AVG(POPULATION)) FROM CITY;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Aggregation > Revising Aggregations-The Blunder

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* Samantha was tasked with calculating the average monthly salaries for all employees in the EMPLOYEES table, but did not realize her keyboard's  key was broken until after completing the calculation. She wants your help finding the difference between her miscalculation (using salaries with any zeros removed), and the actual average salary.

Write a query calculating the amount of error (i.e.:  average monthly salaries), and round it up to the next integer.

Input Format

The EMPLOYEES table is described as follows:


+-------------+--------------+
| Column      | Type         |
+-------------+--------------+
| ID          | integer      |
| NAME        | string       |
| salary      | integer      |
+-------------+--------------+


Note: Salary is per month.

Constraints

1000<salary<10**5

Sample Input:


+-------------+--------------+
| Name        | Salary       |
+-------------+--------------+
| kristeen    |   1420       |
| Ashley      |   2006       |
| Julia       |   2210       |
| Maria       |  3000        |
+-------------+--------------+

Sample Output

2061
Explanation

The table below shows the salaries without zeros as they were entered by Samantha:


+-------------+--------------+
| Name        | Salary       |
+-------------+--------------+
| kristeen    |   142        |
| Ashley      |   26         |
| Julia       |   221        |
| Maria       |   3          |
+-------------+--------------+


------SELECT CEIL(AVG(salary)-AVG(REPLACE(salary,0,''))) FROM EMPLOYEES;


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
### Aggregation > Revising Aggregations - Top Earners

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* We define an employee's total earnings to be their monthly  worked, and the maximum total earnings to be the maximum total earnings for any employee in the Employee table. Write a query to find the maximum total earnings for all employees as well as the total number of employees who have maximum total earnings. Then print these values as  space-separated integers.

Input Format

The Employee table containing employee data for a company is described as follows:

+-------------+--------------+
| Field       | Type         |
+-------------+--------------+
| employee_id | integer      |
| name        | String       |
| months      | integer      |
| salary      |  integer     |
+-------------+--------------+



----SELECT months * salary AS earnings, 
COUNT(*) FROM EMPLOYEE 
GROUP BY 1
ORDER BY earnings DESC
LIMIT 1;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
### population census

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Given the CITY and COUNTRY tables, query the sum of the populations of all cities where the CONTINENT is 'Asia'.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.


Input Format

The CITY and COUNTRY tables are described as follows:

City

+-------------+----------+
| Field       | Type     |
+-------------+----------+
| ID          | int(11)  |
| Name        | char(35) |
| CountryCode | char(3)  |
| District    | char(20) |
| Population  | int(11)  |
+-------------+----------+

Country

+----------------+-------------+
| Field          | Type        |
+----------------+-------------+
| Code           | char(3)     |
| Name           | char(52)    |
| Continent      | char(50)    |
| Region         | char(26)    |
| SurfaceArea    | float(10,2) |
| IndepYear      | smallint(6) |
| Population     | int(11)     |
| LifeExpectancy | float(3,1)  |
| GNP            | float(10,2) |
| GNPOld         | float(10,2) |
| LocalName      | char(45)    |
| GovernmentForm | char(45)    |
| HeadOfState    | char(60)    |
| Capital        | int(11)     |
| Code2          | char(2)     |
+----------------+-------------+




-----SELECT SUM(c.POPULATION) FROM CITY c JOIN COUNTRY b ON c.COUNTRYCODE=b.CODE WHERE b.CONTINENT='Asia';


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

### African Cities

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Given the CITY and COUNTRY tables, query the names of all cities where the CONTINENT is 'Africa'.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

Input Format

The CITY and COUNTRY tables are described as follows:


City

+-------------+----------+
| Field       | Type     |
+-------------+----------+
| ID          | int(11)  |
| Name        | char(35) |
| CountryCode | char(3)  |
| District    | char(20) |
| Population  | int(11)  |
+-------------+----------+

Country

+----------------+-------------+
| Field          | Type        |
+----------------+-------------+
| Code           | char(3)     |
| Name           | char(52)    |
| Continent      | char(50)    |
| Region         | char(26)    |
| SurfaceArea    | float(10,2) |
| IndepYear      | smallint(6) |
| Population     | int(11)     |
| LifeExpectancy | float(3,1)  |
| GNP            | float(10,2) |
| GNPOld         | float(10,2) |
| LocalName      | char(45)    |
| GovernmentForm | char(45)    |
| HeadOfState    | char(60)    |
| Capital        | int(11)     |
| Code2          | char(2)     |
+----------------+-------------+

-----SELECT c.NAME FROM CITY c JOIN COUNTRY b ON c.COUNTRYCODE=b.CODE WHERE CONTINENT='Africa';



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

### Average Population of Each Continent
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Given the CITY and COUNTRY tables, query the names of all the continents (COUNTRY.Continent) and their respective average city populations (CITY.Population) rounded down to the nearest integer.

Note: CITY.CountryCode and COUNTRY.Code are matching key columns.

Input Format

The CITY and COUNTRY tables are described as follows:




City

+-------------+----------+
| Field       | Type     |
+-------------+----------+
| ID          | int(11)  |
| Name        | char(35) |
| CountryCode | char(3)  |
| District    | char(20) |
| Population  | int(11)  |
+-------------+----------+
Country

+----------------+-------------+
| Field          | Type        |
+----------------+-------------+
| Code           | char(3)     |
| Name           | char(52)    |
| Continent      | char(50)    |
| Region         | char(26)    |
| SurfaceArea    | float(10,2) |
| IndepYear      | smallint(6) |
| Population     | int(11)     |
| LifeExpectancy | float(3,1)  |
| GNP            | float(10,2) |
| GNPOld         | float(10,2) |
| LocalName      | char(45)    |
| GovernmentForm | char(45)    |
| HeadOfState    | char(60)    |
| Capital        | int(11)     |
| Code2          | char(2)     |
+----------------+-------------+

---SELECT c.CONTINENT,FLOOR(AVG(b.POPULATION)) FROM COUNTRY c JOIN CITY b ON b.COUNTRYCODE=c.CODE GROUP BY c.CONTINENT;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

###The Report
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
You are given two tables: Students and Grades. Students contains three columns ID, Name and Marks


+-------------+----------+
| COLUMN      | Type     |
+-------------+----------+
| ID          | intger   |
| Name        | String   |
|Marks        | Integer  |
+-------------+----------+
Grades contains the following data:
+----------+-------------+--------+
| Grade	   | Min_Marks   |Max_mark|	  
+----------+-------------+--------+
| 1        | 0	         |9	  |	
| 2        | 10	         |19	  |
| 3        | 20		 |29	  |
| 4        | 30	         |39	  |
| 5        | 40		 |49	  |
| 6        | 50  	 |59	  |
| 7        | 60		 |69	  |
| 8        | 70		 |79	  |
| 9        | 80		 |89	  |
|10        | 90		 |99	  |
+----------+-------------+--------+

Ketty gives Eve a task to generate a report containing three columns: Name, Grade and Mark. Ketty doesn't want the NAMES of those students who received a grade lower than 8. The report must be in descending order by grade -- i.e. higher grades are entered first. If there is more than one student with the same grade (8-10) assigned to them, order those particular students by their name alphabetically. Finally, if the grade is lower than 8, use "NULL" as their name and list them by their grades in descending order. If there is more than one student with the same grade (1-7) assigned to them, order those particular students by their marks in ascending order.

Write a query to help Eve.



-----SELECT CASE
WHEN Grades.Grade<8 THEN 'NULL'
ELSE Students.Name
END
,Grades.Grade,Students.Marks
FROM Students,Grades
WHERE Students.Marks>=Grades.Min_mark AND Students.Marks<=Grades.Max_mark
ORDER BY Grades.Grade DESC,Students.Name;




---------------------------------------------------------------------------------------------------------------------------------------------
Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which the hacker earned a full score. If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.

he following tables contain contest data:

Hackers: The hacker_id is the id of the hacker, and name is the name of the hacker. 

+-------------+----------+
| COLUMN      | Type     |
+-------------+----------+
| hacker_id   | intger   |
| Name        | String   |
|             | 	 |
+-------------+----------+


Difficulty: The difficult_level is the level of difficulty of the challenge, and score is the

+----------------+----------+
| COLUMN         | Type     |
+----------------+----------+
|difficulty_level| intger   |
| score       	 | integer  |
|                | 	    |
+----------------+----------+

Challenges: The challenge_id is the id of the challenge, the hacker_id is the id of the hacker who created the challenge, and difficulty_level is the level of difficulty of the

+----------------+----------+
| COLUMN         | Type     |
+----------------+----------+
|challenge_id    | intger   |
| hacker_id      | integer  |
|difficulty_level| intger   |
+----------------+----------+

Submissions: The submission_id is the id of the submission, hacker_id is the id of the hacker who made the submission, challenge_id is the id of the challenge that the submission belongs to, and score is the score of the submission.

+----------------+----------+
| COLUMN         | Type     |
+----------------+----------+
|submission_id   | intger   |
|challenge_id    | intger   |
| hacker_id      | integer  |
|score           | intger   |
+----------------+----------+


----SELECT h.hacker_id, h.name FROM Submissions AS s join Hackers AS h 
ON s.hacker_id = h.hacker_id 
join Challenges AS c ON s.challenge_id = c.challenge_id
join Difficulty AS d ON c.Difficulty_level = d.Difficulty_level
WHERE s.score = d.score 
GROUP BY h.hacker_id, h.name 
HAVING count(*) > 1
ORDER BY  count(*) DESC, h.hacker_id;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Prepare > SQL > Alternative Queries > Draw The Triangle 1

P(R) represents a pattern drawn by Julia in R rows. The following pattern represents P(5):

* * * * * 
* * * * 
* * * 
* * 
*
Write a query to print the pattern P(20).

--WITH RECURSIVE CTE AS
(
SELECT 20 AS NUM
UNION ALL
SELECT NUM -1 FROM CTE
WHERE NUM>1
)
SELECT  REPEAT(' * ',NUM) FROM CTE;


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Prepare > SQL > Advanced Select > Type of Triangle
Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.
Input Format

The TRIANGLES table is described as follows:
+-------------+----------+
| COLUMN      | Type     |
+-------------+----------+
| A           | Integer  |
| B           | Integer  |
| C           | Integer  |
+-------------+----------+


----SELECT CASE
WHEN A + B <= C OR A + C <= B OR B + C <= A THEN 'Not A Triangle'
WHEN A = B AND B = C THEN 'Equilateral'
WHEN A = B OR B = C OR A = C THEN 'Isosceles'
ELSE 'Scalene'
END
FROM TRIANGLES;

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Prepare > SQL > Advanced Select >The PADS

Generate the following two result sets:

Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format:

There are a total of [occupation_count] [occupation]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.

Note: There will be at least two entries in the table for each type of occupation.

Input Format

The OCCUPATIONS table is described as follows:

+-------------+----------+
| COLUMN      | Type     |
+-------------+----------+
| Name        | String   |
|Occupation   | String   |
+-------------+----------+

---SELECT (name || '(' || SUBSTR(occupation,1,1) || ')') FROM occupations ORDER BY name;
SELECT ('There are a total of ' || COUNT(occupation) || ' ' || LOWER(occupation) || 's' || '.') FROM occupations GROUP BY occupation ORDER BY COUNT(occupation), occupation ASC;

